{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Personal\\\\ChatGPT\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction AppComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate2(\"innerHTML\", \"\", item_r1.person, \": \", item_r1.response, \"\", i0.ɵɵsanitizeHtml);\n    i0.ɵɵproperty(\"ngClass\", item_r1.cssClass);\n  }\n}\n\nexport class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.title = 'ChatGPT';\n    this.chatConversation = [];\n    this.promptText = '';\n    this.showSpinner = false;\n  }\n\n  ngOnInit() {}\n\n  checkResponse() {\n    this.pushChatContent(this.promptText, 'You', 'person');\n    this.invokeGPT();\n  }\n\n  pushChatContent(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.push(chatToPush);\n  }\n\n  getText(data) {\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n\n  invokeGPT() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptText,\n          temperature: 0.95,\n          max_tokens: 150,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0,\n          stream: false\n        };\n        let apiResponse = yield openai.createCompletion(requestData); // const headers = new HttpHeaders({\n        //   'Content-Type': 'application/json',\n        //   'Authorization': `Bearer ${environment.apiKey}`\n        // });\n        // const completion: any = await this.http.post(\"https://api.openai.com/v1/completions\", requestData, { headers }).toPromise();\n\n        _this.showSpinner = true;\n        _this.response = apiResponse.data;\n        _this.showSpinner = false;\n\n        _this.pushChatContent(_this.response.choices[0].text.trim(), 'Bot', 'bot');\n\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 21,\n  vars: 2,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"center\", \"text-primary\"], [1, \"card-body\"], [1, \"card-title\", \"text-success\", \"center\"], [1, \"col-md-2\"], [1, \"col-md-8\"], [1, \"frame-box\"], [4, \"ngFor\", \"ngForOf\"], [\"row\", \"3\", \"cols\", \"15\", \"placeholder\", \"Start by asking what you are looking for\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"push-right\", 3, \"click\"], [1, \"card-text\", \"padding\", 3, \"innerHTML\", \"ngClass\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"br\");\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h4\", 4);\n      i0.ɵɵtext(6, \"Angular Chat powered by ChatGPT\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"h6\", 6);\n      i0.ɵɵtext(9, \"You are now Angular Chat by ChatGPT\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 1);\n      i0.ɵɵelement(11, \"div\", 7);\n      i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9);\n      i0.ɵɵtemplate(14, AppComponent_div_14_Template, 2, 3, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"textarea\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_textarea_ngModelChange_16_listener($event) {\n        return ctx.promptText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"br\");\n      i0.ɵɵelementStart(18, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_18_listener() {\n        return ctx.checkResponse();\n      });\n      i0.ɵɵtext(19, \"Send\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(20, \"div\", 7);\n      i0.ɵɵelementEnd()()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"ngForOf\", ctx.chatConversation);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgClass, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\"]\n});","map":{"version":3,"sources":["D:/Personal/ChatGPT/src/app/app.component.ts"],"names":["Configuration","OpenAIApi","environment","i0","i1","i2","i3","AppComponent_div_14_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","item_r1","$implicit","ɵɵadvance","ɵɵpropertyInterpolate2","person","response","ɵɵsanitizeHtml","ɵɵproperty","cssClass","AppComponent","constructor","http","title","chatConversation","promptText","showSpinner","ngOnInit","checkResponse","pushChatContent","invokeGPT","content","chatToPush","push","getText","data","split","filter","f","length","undefined","configuration","apiKey","openai","requestData","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stream","apiResponse","createCompletion","choices","text","trim","error","console","status","message","ɵfac","AppComponent_Factory","t","ɵɵdirectiveInject","HttpClient","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","AppComponent_Template","ɵɵtext","ɵɵtemplate","ɵɵlistener","AppComponent_Template_textarea_ngModelChange_16_listener","$event","AppComponent_Template_button_click_18_listener","directives","NgForOf","NgClass","DefaultValueAccessor","NgControlStatus","NgModel","styles"],"mappings":"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","sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/common\";\r\nimport * as i3 from \"@angular/forms\";\r\nfunction AppComponent_div_14_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\");\r\n    i0.ɵɵelement(1, \"div\", 13);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const item_r1 = ctx.$implicit;\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵpropertyInterpolate2(\"innerHTML\", \"\", item_r1.person, \": \", item_r1.response, \"\", i0.ɵɵsanitizeHtml);\r\n    i0.ɵɵproperty(\"ngClass\", item_r1.cssClass);\r\n} }\r\nexport class AppComponent {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.title = 'ChatGPT';\r\n        this.chatConversation = [];\r\n        this.promptText = '';\r\n        this.showSpinner = false;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    checkResponse() {\r\n        this.pushChatContent(this.promptText, 'You', 'person');\r\n        this.invokeGPT();\r\n    }\r\n    pushChatContent(content, person, cssClass) {\r\n        const chatToPush = { person: person, response: content, cssClass: cssClass };\r\n        this.chatConversation.push(chatToPush);\r\n    }\r\n    getText(data) {\r\n        return data.split('\\n').filter(f => f.length > 0);\r\n    }\r\n    async invokeGPT() {\r\n        if (this.promptText.length < 2)\r\n            return;\r\n        try {\r\n            this.response = undefined;\r\n            let configuration = new Configuration({ apiKey: environment.apiKey });\r\n            let openai = new OpenAIApi(configuration);\r\n            let requestData = {\r\n                model: 'text-davinci-003',\r\n                prompt: this.promptText,\r\n                temperature: 0.95,\r\n                max_tokens: 150,\r\n                top_p: 1.0,\r\n                frequency_penalty: 0.0,\r\n                presence_penalty: 0.0,\r\n                stream: false\r\n            };\r\n            let apiResponse = await openai.createCompletion(requestData);\r\n            // const headers = new HttpHeaders({\r\n            //   'Content-Type': 'application/json',\r\n            //   'Authorization': `Bearer ${environment.apiKey}`\r\n            // });\r\n            // const completion: any = await this.http.post(\"https://api.openai.com/v1/completions\", requestData, { headers }).toPromise();\r\n            this.showSpinner = true;\r\n            this.response = apiResponse.data;\r\n            this.showSpinner = false;\r\n            this.pushChatContent(this.response.choices[0].text.trim(), 'Bot', 'bot');\r\n            this.showSpinner = false;\r\n        }\r\n        catch (error) {\r\n            this.showSpinner = false;\r\n            // Consider adjusting the error handling logic for your use case\r\n            if (error.response) {\r\n                console.error(error.response.status, error.response.data);\r\n            }\r\n            else {\r\n                console.error(`Error with OpenAI API request: ${error.message}`);\r\n            }\r\n        }\r\n    }\r\n}\r\nAppComponent.ɵfac = function AppComponent_Factory(t) { return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient)); };\r\nAppComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AppComponent, selectors: [[\"app-root\"]], decls: 21, vars: 2, consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"center\", \"text-primary\"], [1, \"card-body\"], [1, \"card-title\", \"text-success\", \"center\"], [1, \"col-md-2\"], [1, \"col-md-8\"], [1, \"frame-box\"], [4, \"ngFor\", \"ngForOf\"], [\"row\", \"3\", \"cols\", \"15\", \"placeholder\", \"Start by asking what you are looking for\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"push-right\", 3, \"click\"], [1, \"card-text\", \"padding\", 3, \"innerHTML\", \"ngClass\"]], template: function AppComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\r\n        i0.ɵɵelement(3, \"br\");\r\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"h4\", 4);\r\n        i0.ɵɵtext(6, \"Angular Chat powered by ChatGPT\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"h6\", 6);\r\n        i0.ɵɵtext(9, \"You are now Angular Chat by ChatGPT\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(10, \"div\", 1);\r\n        i0.ɵɵelement(11, \"div\", 7);\r\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9);\r\n        i0.ɵɵtemplate(14, AppComponent_div_14_Template, 2, 3, \"div\", 10);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(15, \"br\");\r\n        i0.ɵɵelementStart(16, \"textarea\", 11);\r\n        i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_textarea_ngModelChange_16_listener($event) { return ctx.promptText = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(17, \"br\");\r\n        i0.ɵɵelementStart(18, \"button\", 12);\r\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_18_listener() { return ctx.checkResponse(); });\r\n        i0.ɵɵtext(19, \"Send\");\r\n        i0.ɵɵelementEnd()();\r\n        i0.ɵɵelement(20, \"div\", 7);\r\n        i0.ɵɵelementEnd()()()()()();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(14);\r\n        i0.ɵɵproperty(\"ngForOf\", ctx.chatConversation);\r\n        i0.ɵɵadvance(2);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.promptText);\r\n    } }, directives: [i2.NgForOf, i2.NgClass, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}